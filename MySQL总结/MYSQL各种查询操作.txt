1、--  查询指定字段
-- select 列1，列2,.. from 表名；
select name, age from students;

-- as 给字段取别名
select name as 姓名, age as 年龄 from studens;

-- select 表名.字段，..from 表名
select students.name, students.age from students;

-- 通过给表名起别名 
select s.name, s.age from students as s;

-- 消除重复行
distinct 字段
select distinct gender from students;

2、-- 条件查询
 -- 比较运算符
    -- select .... from 表名 where ....;
    --  >  查询大于18岁的信息
   select * from students where age>18;
   
   -- < 查询小于20岁的信息
   select id,name,age from students where age<18;

  -- <=
   select age,from students where age<=18;

  -- >=
  select age from students where age>=18;
  -- = 
  select id,name as 姓名，age as 年龄 from students where age=18;

 -- 逻辑运算符
   --(1) and
   -- 18到30之间的所有学生信息
   select * from students from where age>18 and age<30;

   -- 18岁以上的女性
  select * from students where age>18 and age<30 and gender="女";

  -- (2)or
  -- 18岁以上的或者身高170以上的
  select * from students where age>18 or height>=170;

  --(3) not
  -- 不在18岁以上的女性范围
  select id,name as 姓名, age as 年龄 from students where not (age>18 and gender="女");

  -- 年龄小于或者等于18，并且是女性
  select id,name as 姓名, age as 年龄 from students where ( not age>=18) and gender="女";

-- 模糊查询
 --(1)like
 -- % 替换一个或者多个， _ 替换一个
   --  查询姓名中，以“陈”字开头的名字
   select * from students where name like "陈";

   -- 查询姓名中所有带“雨”的名字
   select * from students where name like "%雨%";
 
   -- 查询有两个字的名字
   select * from students where name like "__";
   
   -- 查询有两个字的名字
   select * from students where name like "___"; 

   --查询至少有两个字的名字
   select * from students where name like "__%";

  -- (2) rlike  正则
  --  查询以 陈开始的名字
  select name as 姓名  from students where name rlike "^陈.*";

  -- 查询以 陈开头以安结尾的name
  select name as 姓名 from students where name rlike "^陈.*安$";

-- 范围查询
  -- （in）in(1,3,5) 表示在一个非连接的范围内
  -- 查询年龄在 19,20的
  select name as 姓名, age as 年龄 from students where age in (18,30)
  select name as 姓名, age as 年龄 from students where age=18 and age=20;
  select name as 姓名, age as 年龄 from students where age =18 or age=20;

  -- （2）not in 不非连续的范围之内
  -- 年龄不是19,20的
  select name as 姓名, age as 年龄 from students where age not in (19,20);

  -- (3) between ..and..表示在一个连续范围内
  -- 查询年龄再19,30之间的
  select name as 姓名, age as 年龄 from students where age between 19 and 30;

  -- (4) not between ..and..表示不再一个连续的范围内
  -- 查询年龄不再19，30之间的
  select name as 姓名, age as 年龄 from students where age not between 19 and 30;
  -- 失败的方式 ：select name as 姓名, age as 年龄 from students where age not (between 19 and 30);

  -- (5) 空判断 
   -- 判断 is null
   -- 查询身高为空的信息
   select * from students where height is null;
  
   -- （is not null ） 查询身高不为空
   select * from students where height is not null;

-- 排序
  -- （1）order by 字段
  -- asc 从小到大排列 即升序  默认就是升序
  -- desc 从大到小排序 即降序
  
   -- 查询年龄在18到30岁之间的女性，身高从高到矮
  select name as 姓名，age as 年龄  from students where (age between 18 and 30 ) and gender="女"  order by height  asc;

  -- 查询年龄在20到40之间的男性，年龄从大到小
 select name as 姓名，age as 年龄 from students where (age between 20 and 40) and gender=1 order by age desc;

   -- （2）order by 多个字段
    --  查询年龄在18到30岁之间的女性，身高从高到矮,如果身高相同的话按照年龄从小到大
   select * from students where (age between 18 and 30) and gender=2 order by height desc,age asc;

    --  查询年龄在20到40的男性，年龄从高到低，序号从小到大，身高从高到低（在order by 后面加上要排序的项）
   select * from students where (age between 20 and 40) and gender=1 order by age desc,id asc,height asc;
     --年龄从大到小，身高从低到高，序号从低到高（order by 后面的项,越在前面的，越有优势）
   select * from students order by age desc,height asc,id asc;

-- 聚合函数
  -- （1） 总数 count
  -- 查询男性的人数，女性的人数
  select count(*) as 男性人数 from students where gender="男"; -->男用数字1表示
  select count(*) as 女性人数 from studetns where gender=2;  --> 女用数字2表示
  
  --  （2）最大值  max
  -- 查询最大的年龄
  select age from students;
  select max(age) from studetnts;

  -- 查询女性的最高，身高
  select max(height) from students where gender=2;

  -- （3）最小值 min
  select min(age) as 女性最小年龄 from students where gender=2;

  -- （4） 求和  sum
  --  计算所有人的年龄总和
  select sum(age) from students;

  --（5） 平均值  avg
  -- 计算平均年龄
  select avg(age) from students;

  -- 计算平均年龄 sum(age)/count(*)
  select sum(age)/count(*) as 平均年龄 from studentsl

  -- (6) 四舍五入 round(123.12,1) 保留一位小数
  -- 计算所有人的平均年龄，保留两位小数
  select round(sum(age)/count(*),2) from students;
  select round(sum(age)/count(*), 3) from students;

  --计算男性的平均身高，保留2位小数
  select round(sum(height)/count(*), 2) from students where gender=1;

12:03 2019/10/6

-- 分组
  -- (1) group by 
  -- 按照性别分组，查询所有性别
  select  name as 姓名 from students group by gender;
  select * from students group by gender;
  select gender from students group by gender;

  -- 计算每中性别中的人数
  select gender,count(*) from students group by gender;

  -- 计算男性的人数
  select gender,count(*) from students where gender=1 group by gender;
  
  -- (2) group_concat(...)
  -- 查询同种性别中的姓名
  select gender, group_concat(name) from students where gender=2 group by gender;
  select gender,group_concat(id,name,age) from students where gender=2 group by gender;
  select gender,group_concat(id,"_",name,"_",age) from students where gender=1 group by  gender;  --最标椎的方式

  -- (3) having
  -- 查询平均年龄超过30岁的性别，以及姓名 having avg(age)>30
  select gender,group_concat(name), avg(age) from students group by gender having avg(age)>30;

  -- 查询每种性别中的人数多于2个信息
  select gender, group_concat(name) from students group by gender having count(*)>2;

-- 分页
  -- （1）limit start, count
  -- 查询id-id5
  select * from students limit 0, 5;

  -- 查询id6-10（包含）书序
  select * from students limit 5, 5;
  
  -- 每页显示2个，第一个页面
  select * from students limit 0, 2;
 
  -- 每页显示2个，第二个页面
  select * from students limit 2, 2;

  -- 每页显示2个，第三个页面
  select * from sutdents  limit 4, 2;

  -- 每页显示2个，第四个页面
  select * from students limit 6, 2;  ---> limit （第N页-1）* 每个的个数，每页的页数；

  -- 每页显示2个，显示第6页的信息，按照年龄从小到大的顺序
  --失败 select  * from students limit 2*(6-1), 2;
  -- 失败 select * from students limit 10, 2 order by age asc;
  select * from students order by age asc limit 10, 2;

  select * from sutdents where gender=2 order by height desc limit 0, 2;

--  连接查询
  -- （1）inner join ...  on
  -- 内连接查询 ： 查询结果为两个表匹配到的数据

  -- select ... from 表A inner join 表B;
  select * from students inner join classes;

  -- 查询有能够对应班级的学生以及班级信息
   select * from students inner join classes on students.cls.id=classes.id;

  -- 按照要求显示姓名，班级
  select  students.*, classes.name from students inner join classes on students.cls_id=classes.id;
  select sutdents.name, classes.name from students inner join classes on students.cls_id=classes.id;

  -- 给数据表起名字
  select s.name, c.name from students as s inner join classes as c on s.cls_id=c.id;

  -- 查询有能够对应班级的学生以及班级信息，显示学生所有信息，只显示班级名称
  select s.*, c.name from students as s innrt join classes as c on s.cls_id=c.id;

  -- 在以上的查询中，将班级姓名显示在第一列
  select c.name, s.* from students as s inner join classes as c on s.cls_id=c.id;

  -- 查询有能够对应班级的学生以及班级信息，按照班级进行排序
  select s.xx, c.xx from students as s inner join classes as c on s.cls_id=c.id order by c.name;
  select s.*,c.name from students as s inner join classes as c on s.cls_id=c.id order by c.name;
  
  -- 当在同一个班级时，按照学生的id从小到大排序
  select s.*, c.name from students as s inner join classes as c on s.cls_id=c.name order by s.name, c.id asc;
  
  --left join 
  -- 右连接查询：查询的结果为两个表匹配到的数据和右边特有的数据，对于左表中不存在的数据使用null填充
 
  -- 查询每位学生对应的班级信息
  select s.*,c.name from students as s left join classes as c on s.cls_id=c.id;

  --查询没有对应班级信息的学生
  select s.*,c.name from students as s left join classes as c on s.cls_id=c.id having c.id is null;
  select * from students as s left join classes as c on s.cls_id=c.id where c.id is null;

  -- （3） right join .. on
  -- 左连接查询： 查询的结果为两个表匹配到的数据和左表特有的数据，对于右表中不存在的数据使用null填充
  -- 将数据表名字互换位置，用left join .. on 完成
  select c.name, s.* from students as s  left join classes as c on s.cls_id=c.id;

-- 自关联
  -- 查询所有省份
 
  -- 查询山东省有哪些市
  select * from area as province inner join areas as city on city.pid=province.aid having province.atitle="山东省";
  select province.atitle, city.atitle from area as province inner join areas as city on city.pid=province.aid having province.atitle="山东省";

  -- 查询青岛市有哪些县城

-- 子查询
  -- 标量子查询
  -- 查询出高于平均身高的信息
  select * from students where height > (select avg(height) from students);

  -- 查询最高男生的信息
  select * from students where height = (select max(height) from students) gender=1;

  -- 列级子查询
  -- 查询学生中班级号能够对应学生的信息
  select * from students where cls_id in (select id from classes);

10:43 2019/10/7

